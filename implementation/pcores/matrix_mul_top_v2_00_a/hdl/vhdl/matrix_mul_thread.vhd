-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2012.4
-- Copyright (C) 2012 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity matrix_mul_thread is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ReadEnablePort_0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    ReadEnablePort_0_ap_vld : OUT STD_LOGIC;
    ReadEmptyPort_0 : IN STD_LOGIC_VECTOR (0 downto 0);
    ReadDataPort_0 : IN STD_LOGIC_VECTOR (31 downto 0);
    WriteEnablePort_0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    WriteEnablePort_0_ap_vld : OUT STD_LOGIC;
    WriteFullPort_0 : IN STD_LOGIC_VECTOR (0 downto 0);
    WriteDataPort_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    WriteDataPort_0_ap_vld : OUT STD_LOGIC;
    m_result_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
    m_result_ce0 : OUT STD_LOGIC;
    m_result_we0 : OUT STD_LOGIC;
    m_result_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_result_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    m_operand1_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
    m_operand1_ce0 : OUT STD_LOGIC;
    m_operand1_we0 : OUT STD_LOGIC;
    m_operand1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_operand1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    m_operand2_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
    m_operand2_ce0 : OUT STD_LOGIC;
    m_operand2_we0 : OUT STD_LOGIC;
    m_operand2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_operand2_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of matrix_mul_thread is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (4 downto 0) := "00101";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (4 downto 0) := "00110";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (4 downto 0) := "00111";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (4 downto 0) := "01001";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (4 downto 0) := "01010";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (4 downto 0) := "01011";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (4 downto 0) := "01100";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (4 downto 0) := "01101";
    constant ap_ST_st15_fsm_14 : STD_LOGIC_VECTOR (4 downto 0) := "01110";
    constant ap_ST_st16_fsm_15 : STD_LOGIC_VECTOR (4 downto 0) := "01111";
    constant ap_ST_st17_fsm_16 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_ST_st18_fsm_17 : STD_LOGIC_VECTOR (4 downto 0) := "10001";
    constant ap_ST_st19_fsm_18 : STD_LOGIC_VECTOR (4 downto 0) := "10010";
    constant ap_ST_st20_fsm_19 : STD_LOGIC_VECTOR (4 downto 0) := "10011";
    constant ap_ST_st21_fsm_20 : STD_LOGIC_VECTOR (4 downto 0) := "10100";
    constant ap_ST_st22_fsm_21 : STD_LOGIC_VECTOR (4 downto 0) := "10101";
    constant ap_ST_st23_fsm_22 : STD_LOGIC_VECTOR (4 downto 0) := "10110";
    constant ap_ST_st24_fsm_23 : STD_LOGIC_VECTOR (4 downto 0) := "10111";
    constant ap_ST_st25_fsm_24 : STD_LOGIC_VECTOR (4 downto 0) := "11000";
    constant ap_ST_st26_fsm_25 : STD_LOGIC_VECTOR (4 downto 0) := "11001";
    constant ap_ST_st27_fsm_26 : STD_LOGIC_VECTOR (4 downto 0) := "11010";
    constant ap_ST_st28_fsm_27 : STD_LOGIC_VECTOR (4 downto 0) := "11011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv17_15F90 : STD_LOGIC_VECTOR (16 downto 0) := "10101111110010000";
    constant ap_const_lv17_1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_const_lv17_15F8F : STD_LOGIC_VECTOR (16 downto 0) := "10101111110001111";
    constant ap_const_lv17_12C : STD_LOGIC_VECTOR (16 downto 0) := "00000000100101100";
    constant ap_const_lv9_12C : STD_LOGIC_VECTOR (8 downto 0) := "100101100";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";

    signal m_operand1_addr_1_reg_557 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    signal i_3_fu_373_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal i_3_reg_565 : STD_LOGIC_VECTOR (16 downto 0);
    signal ptData32_assign_4_rec_fu_389_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal ptData32_assign_4_rec_reg_573 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_wireread_fu_140_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_operand2_addr_1_reg_578 : STD_LOGIC_VECTOR (16 downto 0);
    signal i_5_fu_406_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal i_5_reg_586 : STD_LOGIC_VECTOR (16 downto 0);
    signal ptData32_assign_7_rec_fu_422_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal ptData32_assign_7_rec_reg_594 : STD_LOGIC_VECTOR (16 downto 0);
    signal next_mul1_fu_428_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal next_mul1_reg_599 : STD_LOGIC_VECTOR (16 downto 0);
    signal i_6_fu_440_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_6_reg_607 : STD_LOGIC_VECTOR (8 downto 0);
    signal j_cast_fu_446_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal j_cast_reg_612 : STD_LOGIC_VECTOR (16 downto 0);
    signal j_1_fu_456_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal j_1_reg_621 : STD_LOGIC_VECTOR (8 downto 0);
    signal k_1_fu_472_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal k_1_reg_629 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond8_fu_466_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal next_mul_fu_489_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal next_mul_reg_639 : STD_LOGIC_VECTOR (16 downto 0);
    signal m_operand1_load_reg_649 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_operand2_load_reg_654 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_515_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_reg_659 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_1_fu_519_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_result_addr_1_reg_669 : STD_LOGIC_VECTOR (16 downto 0);
    signal i_7_fu_535_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal i_7_reg_677 : STD_LOGIC_VECTOR (16 downto 0);
    signal ptData32_assign_8_rec_fu_551_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal ptData32_assign_8_rec_reg_685 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_wireread_fu_153_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ptData32_assign_1_rec_reg_220 : STD_LOGIC_VECTOR (16 downto 0);
    signal i_reg_232 : STD_LOGIC_VECTOR (16 downto 0);
    signal ptData32_assign_3_rec_reg_244 : STD_LOGIC_VECTOR (16 downto 0);
    signal exitcond_fu_367_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_reg_256 : STD_LOGIC_VECTOR (16 downto 0);
    signal i_2_reg_268 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond9_fu_450_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond1_fu_400_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_mul1_reg_279 : STD_LOGIC_VECTOR (16 downto 0);
    signal j_reg_291 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond2_fu_434_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_reg_302 : STD_LOGIC_VECTOR (8 downto 0);
    signal sum_reg_313 : STD_LOGIC_VECTOR (31 downto 0);
    signal phi_mul_reg_326 : STD_LOGIC_VECTOR (16 downto 0);
    signal ptData32_assign_6_rec_reg_337 : STD_LOGIC_VECTOR (16 downto 0);
    signal i_4_reg_349 : STD_LOGIC_VECTOR (16 downto 0);
    signal ptData32_assign_1_rec_cast_fu_362_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ptData32_assign_3_rec_cast_fu_395_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_cast_fu_484_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_cast_fu_500_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_cast_fu_510_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ptData32_assign_6_rec_cast_fu_524_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_379_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ptData3_0_i_cast_fu_385_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_8_fu_412_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ptData3_0_i1_cast_fu_418_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal k_cast_fu_462_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_2_fu_478_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_5_fu_495_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_1_fu_505_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_515_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_515_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_541_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ptData3_0_i2_cast_fu_547_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_515_ce : STD_LOGIC;
    signal exitcond7_fu_529_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);

    component matrix_mul_mul_32s_32s_32_6 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    matrix_mul_mul_32s_32s_32_6_U1 : component matrix_mul_mul_32s_32s_32_6
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_515_p0,
        din1 => grp_fu_515_p1,
        ce => grp_fu_515_ce,
        dout => grp_fu_515_p2);




    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st2_fsm_1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_reg assign process. --
    ap_reg_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st12_fsm_11 = ap_CS_fsm)) then 
                i_1_reg_256 <= i_5_reg_586;
            elsif (((ap_ST_st5_fsm_4 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond_fu_367_p2)))) then 
                i_1_reg_256 <= ap_const_lv17_0;
            end if; 
            if (((ap_ST_st9_fsm_8 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond1_fu_400_p2)))) then 
                i_2_reg_268 <= ap_const_lv9_0;
            elsif (((ap_ST_st14_fsm_13 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond9_fu_450_p2)))) then 
                i_2_reg_268 <= i_6_reg_607;
            end if; 
            if ((ap_ST_st5_fsm_4 = ap_CS_fsm)) then 
                i_3_reg_565 <= i_3_fu_373_p2;
            end if; 
            if ((ap_ST_st28_fsm_27 = ap_CS_fsm)) then 
                i_4_reg_349 <= i_7_reg_677;
            elsif (((ap_ST_st13_fsm_12 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond2_fu_434_p2)))) then 
                i_4_reg_349 <= ap_const_lv17_0;
            end if; 
            if ((ap_ST_st9_fsm_8 = ap_CS_fsm)) then 
                i_5_reg_586 <= i_5_fu_406_p2;
            end if; 
            if ((ap_ST_st13_fsm_12 = ap_CS_fsm)) then 
                i_6_reg_607 <= i_6_fu_440_p2;
            end if; 
            if ((ap_ST_st24_fsm_23 = ap_CS_fsm)) then 
                i_7_reg_677 <= i_7_fu_535_p2;
            end if; 
            if ((ap_ST_st8_fsm_7 = ap_CS_fsm)) then 
                i_reg_232 <= i_3_reg_565;
            elsif ((ap_ST_st4_fsm_3 = ap_CS_fsm)) then 
                i_reg_232 <= ap_const_lv17_0;
            end if; 
            if ((ap_ST_st14_fsm_13 = ap_CS_fsm)) then 
                j_1_reg_621 <= j_1_fu_456_p2;
            end if; 
            if ((ap_ST_st14_fsm_13 = ap_CS_fsm)) then 
                j_cast_reg_612(0) <= j_cast_fu_446_p1(0);
                j_cast_reg_612(1) <= j_cast_fu_446_p1(1);
                j_cast_reg_612(2) <= j_cast_fu_446_p1(2);
                j_cast_reg_612(3) <= j_cast_fu_446_p1(3);
                j_cast_reg_612(4) <= j_cast_fu_446_p1(4);
                j_cast_reg_612(5) <= j_cast_fu_446_p1(5);
                j_cast_reg_612(6) <= j_cast_fu_446_p1(6);
                j_cast_reg_612(7) <= j_cast_fu_446_p1(7);
                j_cast_reg_612(8) <= j_cast_fu_446_p1(8);
            end if; 
            if (((ap_ST_st13_fsm_12 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond2_fu_434_p2))) then 
                j_reg_291 <= ap_const_lv9_0;
            elsif (((ap_ST_st15_fsm_14 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond8_fu_466_p2)))) then 
                j_reg_291 <= j_1_reg_621;
            end if; 
            if ((ap_ST_st15_fsm_14 = ap_CS_fsm)) then 
                k_1_reg_629 <= k_1_fu_472_p2;
            end if; 
            if (((ap_ST_st14_fsm_13 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond9_fu_450_p2))) then 
                k_reg_302 <= ap_const_lv9_0;
            elsif ((ap_ST_st23_fsm_22 = ap_CS_fsm)) then 
                k_reg_302 <= k_1_reg_629;
            end if; 
            if ((ap_ST_st5_fsm_4 = ap_CS_fsm)) then 
                m_operand1_addr_1_reg_557 <= ptData32_assign_1_rec_cast_fu_362_p1(17 - 1 downto 0);
            end if; 
            if ((ap_ST_st16_fsm_15 = ap_CS_fsm)) then 
                m_operand1_load_reg_649 <= m_operand1_q0;
            end if; 
            if ((ap_ST_st9_fsm_8 = ap_CS_fsm)) then 
                m_operand2_addr_1_reg_578 <= ptData32_assign_3_rec_cast_fu_395_p1(17 - 1 downto 0);
            end if; 
            if ((ap_ST_st16_fsm_15 = ap_CS_fsm)) then 
                m_operand2_load_reg_654 <= m_operand2_q0;
            end if; 
            if ((ap_ST_st24_fsm_23 = ap_CS_fsm)) then 
                m_result_addr_1_reg_669 <= ptData32_assign_6_rec_cast_fu_524_p1(17 - 1 downto 0);
            end if; 
            if ((ap_ST_st13_fsm_12 = ap_CS_fsm)) then 
                next_mul1_reg_599 <= next_mul1_fu_428_p2;
            end if; 
            if (((ap_ST_st15_fsm_14 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond8_fu_466_p2))) then 
                next_mul_reg_639 <= next_mul_fu_489_p2;
            end if; 
            if (((ap_ST_st9_fsm_8 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond1_fu_400_p2)))) then 
                phi_mul1_reg_279 <= ap_const_lv17_0;
            elsif (((ap_ST_st14_fsm_13 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond9_fu_450_p2)))) then 
                phi_mul1_reg_279 <= next_mul1_reg_599;
            end if; 
            if (((ap_ST_st14_fsm_13 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond9_fu_450_p2))) then 
                phi_mul_reg_326 <= ap_const_lv17_0;
            elsif ((ap_ST_st23_fsm_22 = ap_CS_fsm)) then 
                phi_mul_reg_326 <= next_mul_reg_639;
            end if; 
            if ((ap_ST_st8_fsm_7 = ap_CS_fsm)) then 
                ptData32_assign_1_rec_reg_220 <= ptData32_assign_4_rec_reg_573;
            elsif ((ap_ST_st4_fsm_3 = ap_CS_fsm)) then 
                ptData32_assign_1_rec_reg_220 <= ap_const_lv17_0;
            end if; 
            if ((ap_ST_st12_fsm_11 = ap_CS_fsm)) then 
                ptData32_assign_3_rec_reg_244 <= ptData32_assign_7_rec_reg_594;
            elsif (((ap_ST_st5_fsm_4 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond_fu_367_p2)))) then 
                ptData32_assign_3_rec_reg_244 <= ap_const_lv17_0;
            end if; 
            if (((ap_ST_st6_fsm_5 = ap_CS_fsm) and (grp_wireread_fu_140_p2 = ap_const_lv1_0))) then 
                ptData32_assign_4_rec_reg_573 <= ptData32_assign_4_rec_fu_389_p2;
            end if; 
            if ((ap_ST_st28_fsm_27 = ap_CS_fsm)) then 
                ptData32_assign_6_rec_reg_337 <= ptData32_assign_8_rec_reg_685;
            elsif (((ap_ST_st13_fsm_12 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond2_fu_434_p2)))) then 
                ptData32_assign_6_rec_reg_337 <= ap_const_lv17_0;
            end if; 
            if (((grp_wireread_fu_140_p2 = ap_const_lv1_0) and (ap_ST_st10_fsm_9 = ap_CS_fsm))) then 
                ptData32_assign_7_rec_reg_594 <= ptData32_assign_7_rec_fu_422_p2;
            end if; 
            if (((ap_ST_st25_fsm_24 = ap_CS_fsm) and (ap_const_lv1_0 = grp_wireread_fu_153_p2))) then 
                ptData32_assign_8_rec_reg_685 <= ptData32_assign_8_rec_fu_551_p2;
            end if; 
            if (((ap_ST_st14_fsm_13 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond9_fu_450_p2))) then 
                sum_reg_313 <= ap_const_lv32_0;
            elsif ((ap_ST_st23_fsm_22 = ap_CS_fsm)) then 
                sum_reg_313 <= sum_1_fu_519_p2;
            end if; 
            if ((ap_ST_st22_fsm_21 = ap_CS_fsm)) then 
                tmp_6_reg_659 <= grp_fu_515_p2;
            end if; 
        end if;
    end process;
    j_cast_reg_612(16 downto 9) <= "00000000";

    -- ReadEnablePort_0 assign process. --
    ReadEnablePort_0_assign_proc : process(ap_CS_fsm, grp_wireread_fu_140_p2)
    begin
        if (((ap_ST_st7_fsm_6 = ap_CS_fsm) or (ap_ST_st11_fsm_10 = ap_CS_fsm))) then 
            ReadEnablePort_0 <= ap_const_lv1_0;
        elsif ((((ap_ST_st6_fsm_5 = ap_CS_fsm) and (grp_wireread_fu_140_p2 = ap_const_lv1_0)) or ((grp_wireread_fu_140_p2 = ap_const_lv1_0) and (ap_ST_st10_fsm_9 = ap_CS_fsm)))) then 
            ReadEnablePort_0 <= ap_const_lv1_1;
        else 
            ReadEnablePort_0 <= ap_const_lv1_1;
        end if; 
    end process;


    -- ReadEnablePort_0_ap_vld assign process. --
    ReadEnablePort_0_ap_vld_assign_proc : process(ap_CS_fsm, grp_wireread_fu_140_p2)
    begin
        if ((((ap_ST_st6_fsm_5 = ap_CS_fsm) and (grp_wireread_fu_140_p2 = ap_const_lv1_0)) or ((grp_wireread_fu_140_p2 = ap_const_lv1_0) and (ap_ST_st10_fsm_9 = ap_CS_fsm)) or (ap_ST_st7_fsm_6 = ap_CS_fsm) or (ap_ST_st11_fsm_10 = ap_CS_fsm))) then 
            ReadEnablePort_0_ap_vld <= ap_const_logic_1;
        else 
            ReadEnablePort_0_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    -- WriteDataPort_0 assign process. --
    WriteDataPort_0_assign_proc : process(m_result_q0, ap_CS_fsm)
    begin
        if ((ap_ST_st27_fsm_26 = ap_CS_fsm)) then 
            WriteDataPort_0 <= ap_const_lv32_0;
        elsif ((ap_ST_st26_fsm_25 = ap_CS_fsm)) then 
            WriteDataPort_0 <= m_result_q0;
        else 
            WriteDataPort_0 <= ap_const_lv32_0;
        end if; 
    end process;


    -- WriteDataPort_0_ap_vld assign process. --
    WriteDataPort_0_ap_vld_assign_proc : process(ap_CS_fsm)
    begin
        if (((ap_ST_st26_fsm_25 = ap_CS_fsm) or (ap_ST_st27_fsm_26 = ap_CS_fsm))) then 
            WriteDataPort_0_ap_vld <= ap_const_logic_1;
        else 
            WriteDataPort_0_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    -- WriteEnablePort_0 assign process. --
    WriteEnablePort_0_assign_proc : process(ap_CS_fsm)
    begin
        if ((ap_ST_st27_fsm_26 = ap_CS_fsm)) then 
            WriteEnablePort_0 <= ap_const_lv1_0;
        elsif ((ap_ST_st26_fsm_25 = ap_CS_fsm)) then 
            WriteEnablePort_0 <= ap_const_lv1_1;
        else 
            WriteEnablePort_0 <= ap_const_lv1_1;
        end if; 
    end process;


    -- WriteEnablePort_0_ap_vld assign process. --
    WriteEnablePort_0_ap_vld_assign_proc : process(ap_CS_fsm)
    begin
        if (((ap_ST_st26_fsm_25 = ap_CS_fsm) or (ap_ST_st27_fsm_26 = ap_CS_fsm))) then 
            WriteEnablePort_0_ap_vld <= ap_const_logic_1;
        else 
            WriteEnablePort_0_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process(ap_CS_fsm, grp_wireread_fu_140_p2, exitcond8_fu_466_p2, grp_wireread_fu_153_p2, exitcond_fu_367_p2, exitcond9_fu_450_p2, exitcond1_fu_400_p2, exitcond2_fu_434_p2, exitcond7_fu_529_p2)
    begin
        if ((ap_ST_st27_fsm_26 = ap_CS_fsm)) then 
            ap_NS_fsm <= ap_ST_st28_fsm_27;
        elsif ((ap_ST_st26_fsm_25 = ap_CS_fsm)) then 
            ap_NS_fsm <= ap_ST_st27_fsm_26;
        elsif (((ap_ST_st25_fsm_24 = ap_CS_fsm) and (ap_const_lv1_0 = grp_wireread_fu_153_p2))) then 
            ap_NS_fsm <= ap_ST_st26_fsm_25;
        elsif ((((ap_ST_st24_fsm_23 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond7_fu_529_p2)) or ((ap_ST_st25_fsm_24 = ap_CS_fsm) and not((ap_const_lv1_0 = grp_wireread_fu_153_p2))))) then 
            ap_NS_fsm <= ap_ST_st25_fsm_24;
        elsif ((ap_ST_st22_fsm_21 = ap_CS_fsm)) then 
            ap_NS_fsm <= ap_ST_st23_fsm_22;
        elsif ((ap_ST_st21_fsm_20 = ap_CS_fsm)) then 
            ap_NS_fsm <= ap_ST_st22_fsm_21;
        elsif ((ap_ST_st20_fsm_19 = ap_CS_fsm)) then 
            ap_NS_fsm <= ap_ST_st21_fsm_20;
        elsif ((ap_ST_st19_fsm_18 = ap_CS_fsm)) then 
            ap_NS_fsm <= ap_ST_st20_fsm_19;
        elsif ((ap_ST_st18_fsm_17 = ap_CS_fsm)) then 
            ap_NS_fsm <= ap_ST_st19_fsm_18;
        elsif ((ap_ST_st17_fsm_16 = ap_CS_fsm)) then 
            ap_NS_fsm <= ap_ST_st18_fsm_17;
        elsif ((ap_ST_st16_fsm_15 = ap_CS_fsm)) then 
            ap_NS_fsm <= ap_ST_st17_fsm_16;
        elsif (((ap_ST_st15_fsm_14 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond8_fu_466_p2))) then 
            ap_NS_fsm <= ap_ST_st16_fsm_15;
        elsif (((ap_ST_st23_fsm_22 = ap_CS_fsm) or ((ap_ST_st14_fsm_13 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond9_fu_450_p2)))) then 
            ap_NS_fsm <= ap_ST_st15_fsm_14;
        elsif ((((ap_ST_st13_fsm_12 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond2_fu_434_p2))) or (ap_ST_st28_fsm_27 = ap_CS_fsm))) then 
            ap_NS_fsm <= ap_ST_st24_fsm_23;
        elsif ((((ap_ST_st15_fsm_14 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond8_fu_466_p2))) or ((ap_ST_st13_fsm_12 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond2_fu_434_p2)))) then 
            ap_NS_fsm <= ap_ST_st14_fsm_13;
        elsif ((ap_ST_st11_fsm_10 = ap_CS_fsm)) then 
            ap_NS_fsm <= ap_ST_st12_fsm_11;
        elsif (((grp_wireread_fu_140_p2 = ap_const_lv1_0) and (ap_ST_st10_fsm_9 = ap_CS_fsm))) then 
            ap_NS_fsm <= ap_ST_st11_fsm_10;
        elsif ((((ap_ST_st14_fsm_13 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond9_fu_450_p2))) or ((ap_ST_st9_fsm_8 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond1_fu_400_p2))))) then 
            ap_NS_fsm <= ap_ST_st13_fsm_12;
        elsif ((((ap_ST_st9_fsm_8 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond1_fu_400_p2)) or ((ap_ST_st10_fsm_9 = ap_CS_fsm) and not((grp_wireread_fu_140_p2 = ap_const_lv1_0))))) then 
            ap_NS_fsm <= ap_ST_st10_fsm_9;
        elsif ((ap_ST_st7_fsm_6 = ap_CS_fsm)) then 
            ap_NS_fsm <= ap_ST_st8_fsm_7;
        elsif (((ap_ST_st6_fsm_5 = ap_CS_fsm) and (grp_wireread_fu_140_p2 = ap_const_lv1_0))) then 
            ap_NS_fsm <= ap_ST_st7_fsm_6;
        elsif ((((ap_ST_st5_fsm_4 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond_fu_367_p2))) or (ap_ST_st12_fsm_11 = ap_CS_fsm))) then 
            ap_NS_fsm <= ap_ST_st9_fsm_8;
        elsif ((((ap_ST_st5_fsm_4 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond_fu_367_p2)) or ((ap_ST_st6_fsm_5 = ap_CS_fsm) and not((grp_wireread_fu_140_p2 = ap_const_lv1_0))))) then 
            ap_NS_fsm <= ap_ST_st6_fsm_5;
        elsif (((ap_ST_st4_fsm_3 = ap_CS_fsm) or (ap_ST_st8_fsm_7 = ap_CS_fsm))) then 
            ap_NS_fsm <= ap_ST_st5_fsm_4;
        elsif (((ap_ST_st3_fsm_2 = ap_CS_fsm) or ((ap_ST_st24_fsm_23 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond7_fu_529_p2))))) then 
            ap_NS_fsm <= ap_ST_st4_fsm_3;
        elsif ((ap_ST_st2_fsm_1 = ap_CS_fsm)) then 
            ap_NS_fsm <= ap_ST_st3_fsm_2;
        else 
            ap_NS_fsm <= ap_CS_fsm;
        end if; 
    end process;

    exitcond1_fu_400_p2 <= "1" when (i_1_reg_256 = ap_const_lv17_15F90) else "0";
    exitcond2_fu_434_p2 <= "1" when (i_2_reg_268 = ap_const_lv9_12C) else "0";
    exitcond7_fu_529_p2 <= "1" when (i_4_reg_349 = ap_const_lv17_15F90) else "0";
    exitcond8_fu_466_p2 <= "1" when (k_reg_302 = ap_const_lv9_12C) else "0";
    exitcond9_fu_450_p2 <= "1" when (j_reg_291 = ap_const_lv9_12C) else "0";
    exitcond_fu_367_p2 <= "1" when (i_reg_232 = ap_const_lv17_15F90) else "0";
    grp_fu_515_ce <= ap_const_logic_1;
    grp_fu_515_p0 <= m_operand2_load_reg_654;
    grp_fu_515_p1 <= m_operand1_load_reg_649;
    grp_wireread_fu_140_p2 <= ReadEmptyPort_0;
    grp_wireread_fu_153_p2 <= WriteFullPort_0;
    i_3_fu_373_p2 <= std_logic_vector(unsigned(i_reg_232) + unsigned(ap_const_lv17_1));
    i_5_fu_406_p2 <= std_logic_vector(unsigned(i_1_reg_256) + unsigned(ap_const_lv17_1));
    i_6_fu_440_p2 <= std_logic_vector(unsigned(i_2_reg_268) + unsigned(ap_const_lv9_1));
    i_7_fu_535_p2 <= std_logic_vector(unsigned(i_4_reg_349) + unsigned(ap_const_lv17_1));
    j_1_fu_456_p2 <= std_logic_vector(unsigned(j_reg_291) + unsigned(ap_const_lv9_1));
    j_cast_fu_446_p1 <= std_logic_vector(resize(unsigned(j_reg_291),17));
    k_1_fu_472_p2 <= std_logic_vector(unsigned(k_reg_302) + unsigned(ap_const_lv9_1));
    k_cast_fu_462_p1 <= std_logic_vector(resize(unsigned(k_reg_302),17));

    -- m_operand1_address0 assign process. --
    m_operand1_address0_assign_proc : process(m_operand1_addr_1_reg_557, ap_CS_fsm, grp_wireread_fu_140_p2, exitcond8_fu_466_p2, tmp_2_cast_fu_484_p1)
    begin
        if (((ap_ST_st6_fsm_5 = ap_CS_fsm) and (grp_wireread_fu_140_p2 = ap_const_lv1_0))) then 
            m_operand1_address0 <= m_operand1_addr_1_reg_557;
        elsif (((ap_ST_st15_fsm_14 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond8_fu_466_p2))) then 
            m_operand1_address0 <= tmp_2_cast_fu_484_p1(17 - 1 downto 0);
        else 
            m_operand1_address0 <= tmp_2_cast_fu_484_p1(17 - 1 downto 0);
        end if; 
    end process;


    -- m_operand1_ce0 assign process. --
    m_operand1_ce0_assign_proc : process(ap_CS_fsm, grp_wireread_fu_140_p2, exitcond8_fu_466_p2)
    begin
        if ((((ap_ST_st6_fsm_5 = ap_CS_fsm) and (grp_wireread_fu_140_p2 = ap_const_lv1_0)) or ((ap_ST_st15_fsm_14 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond8_fu_466_p2)))) then 
            m_operand1_ce0 <= ap_const_logic_1;
        else 
            m_operand1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    m_operand1_d0 <= ReadDataPort_0;

    -- m_operand1_we0 assign process. --
    m_operand1_we0_assign_proc : process(ap_CS_fsm, grp_wireread_fu_140_p2)
    begin
        if ((((ap_ST_st6_fsm_5 = ap_CS_fsm) and (grp_wireread_fu_140_p2 = ap_const_lv1_0)))) then 
            m_operand1_we0 <= ap_const_logic_1;
        else 
            m_operand1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- m_operand2_address0 assign process. --
    m_operand2_address0_assign_proc : process(ap_CS_fsm, grp_wireread_fu_140_p2, m_operand2_addr_1_reg_578, exitcond8_fu_466_p2, tmp_5_cast_fu_500_p1)
    begin
        if (((grp_wireread_fu_140_p2 = ap_const_lv1_0) and (ap_ST_st10_fsm_9 = ap_CS_fsm))) then 
            m_operand2_address0 <= m_operand2_addr_1_reg_578;
        elsif (((ap_ST_st15_fsm_14 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond8_fu_466_p2))) then 
            m_operand2_address0 <= tmp_5_cast_fu_500_p1(17 - 1 downto 0);
        else 
            m_operand2_address0 <= tmp_5_cast_fu_500_p1(17 - 1 downto 0);
        end if; 
    end process;


    -- m_operand2_ce0 assign process. --
    m_operand2_ce0_assign_proc : process(ap_CS_fsm, grp_wireread_fu_140_p2, exitcond8_fu_466_p2)
    begin
        if ((((grp_wireread_fu_140_p2 = ap_const_lv1_0) and (ap_ST_st10_fsm_9 = ap_CS_fsm)) or ((ap_ST_st15_fsm_14 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond8_fu_466_p2)))) then 
            m_operand2_ce0 <= ap_const_logic_1;
        else 
            m_operand2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    m_operand2_d0 <= ReadDataPort_0;

    -- m_operand2_we0 assign process. --
    m_operand2_we0_assign_proc : process(ap_CS_fsm, grp_wireread_fu_140_p2)
    begin
        if ((((grp_wireread_fu_140_p2 = ap_const_lv1_0) and (ap_ST_st10_fsm_9 = ap_CS_fsm)))) then 
            m_operand2_we0 <= ap_const_logic_1;
        else 
            m_operand2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- m_result_address0 assign process. --
    m_result_address0_assign_proc : process(ap_CS_fsm, exitcond8_fu_466_p2, m_result_addr_1_reg_669, grp_wireread_fu_153_p2, tmp_1_cast_fu_510_p1)
    begin
        if (((ap_ST_st15_fsm_14 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond8_fu_466_p2)))) then 
            m_result_address0 <= tmp_1_cast_fu_510_p1(17 - 1 downto 0);
        elsif (((ap_ST_st25_fsm_24 = ap_CS_fsm) and (ap_const_lv1_0 = grp_wireread_fu_153_p2))) then 
            m_result_address0 <= m_result_addr_1_reg_669;
        else 
            m_result_address0 <= tmp_1_cast_fu_510_p1(17 - 1 downto 0);
        end if; 
    end process;


    -- m_result_ce0 assign process. --
    m_result_ce0_assign_proc : process(ap_CS_fsm, exitcond8_fu_466_p2, grp_wireread_fu_153_p2)
    begin
        if ((((ap_ST_st25_fsm_24 = ap_CS_fsm) and (ap_const_lv1_0 = grp_wireread_fu_153_p2)) or ((ap_ST_st15_fsm_14 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond8_fu_466_p2))))) then 
            m_result_ce0 <= ap_const_logic_1;
        else 
            m_result_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    m_result_d0 <= sum_reg_313;

    -- m_result_we0 assign process. --
    m_result_we0_assign_proc : process(ap_CS_fsm, exitcond8_fu_466_p2)
    begin
        if ((((ap_ST_st15_fsm_14 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond8_fu_466_p2))))) then 
            m_result_we0 <= ap_const_logic_1;
        else 
            m_result_we0 <= ap_const_logic_0;
        end if; 
    end process;

    next_mul1_fu_428_p2 <= std_logic_vector(unsigned(phi_mul1_reg_279) + unsigned(ap_const_lv17_12C));
    next_mul_fu_489_p2 <= std_logic_vector(unsigned(phi_mul_reg_326) + unsigned(ap_const_lv17_12C));
    ptData32_assign_1_rec_cast_fu_362_p1 <= std_logic_vector(resize(unsigned(ptData32_assign_1_rec_reg_220),32));
    ptData32_assign_3_rec_cast_fu_395_p1 <= std_logic_vector(resize(unsigned(ptData32_assign_3_rec_reg_244),32));
    ptData32_assign_4_rec_fu_389_p2 <= std_logic_vector(unsigned(ptData32_assign_1_rec_reg_220) + unsigned(ptData3_0_i_cast_fu_385_p1));
    ptData32_assign_6_rec_cast_fu_524_p1 <= std_logic_vector(resize(unsigned(ptData32_assign_6_rec_reg_337),32));
    ptData32_assign_7_rec_fu_422_p2 <= std_logic_vector(unsigned(ptData32_assign_3_rec_reg_244) + unsigned(ptData3_0_i1_cast_fu_418_p1));
    ptData32_assign_8_rec_fu_551_p2 <= std_logic_vector(unsigned(ptData32_assign_6_rec_reg_337) + unsigned(ptData3_0_i2_cast_fu_547_p1));
    ptData3_0_i1_cast_fu_418_p1 <= std_logic_vector(resize(unsigned(tmp_8_fu_412_p2),17));
    ptData3_0_i2_cast_fu_547_p1 <= std_logic_vector(resize(unsigned(tmp_s_fu_541_p2),17));
    ptData3_0_i_cast_fu_385_p1 <= std_logic_vector(resize(unsigned(tmp_3_fu_379_p2),17));
    sum_1_fu_519_p2 <= std_logic_vector(unsigned(tmp_6_reg_659) + unsigned(sum_reg_313));
    tmp_1_cast_fu_510_p1 <= std_logic_vector(resize(unsigned(tmp_1_fu_505_p2),32));
    tmp_1_fu_505_p2 <= std_logic_vector(unsigned(j_cast_reg_612) + unsigned(phi_mul1_reg_279));
    tmp_2_cast_fu_484_p1 <= std_logic_vector(resize(unsigned(tmp_2_fu_478_p2),32));
    tmp_2_fu_478_p2 <= std_logic_vector(unsigned(k_cast_fu_462_p1) + unsigned(phi_mul1_reg_279));
    tmp_3_fu_379_p2 <= "1" when (unsigned(i_reg_232) < unsigned(ap_const_lv17_15F8F)) else "0";
    tmp_5_cast_fu_500_p1 <= std_logic_vector(resize(unsigned(tmp_5_fu_495_p2),32));
    tmp_5_fu_495_p2 <= std_logic_vector(unsigned(phi_mul_reg_326) + unsigned(j_cast_reg_612));
    tmp_8_fu_412_p2 <= "1" when (unsigned(i_1_reg_256) < unsigned(ap_const_lv17_15F8F)) else "0";
    tmp_s_fu_541_p2 <= "1" when (unsigned(i_4_reg_349) < unsigned(ap_const_lv17_15F8F)) else "0";
end behav;
