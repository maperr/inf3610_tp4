// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2012.4
// Copyright (C) 2012 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="matrix_mul,hls_ip_2012_4,{HLS_INPUT_TYPE=sc,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.360000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=576,HLS_SYN_DSP=48,HLS_SYN_FF=10411,HLS_SYN_LUT=17430}" *)

module matrix_mul (
        nResetPort,
        ClockPort,
        ReadEnablePort_0,
        ReadEmptyPort_0,
        ReadDataPort_0,
        WriteEnablePort_0,
        WriteFullPort_0,
        WriteDataPort_0
);

input   nResetPort;
input   ClockPort;
output  [0:0] ReadEnablePort_0;
input  [0:0] ReadEmptyPort_0;
input  [31:0] ReadDataPort_0;
output  [0:0] WriteEnablePort_0;
input  [0:0] WriteFullPort_0;
output  [31:0] WriteDataPort_0;

reg[0:0] ReadEnablePort_0 = 1'b0;
reg[0:0] WriteEnablePort_0 = 1'b0;
reg[31:0] WriteDataPort_0 = 32'b00000000000000000000000000000000;
wire   [16:0] m_result_address0;
wire    m_result_ce0;
wire    m_result_we0;
wire   [31:0] m_result_d0;
wire   [31:0] m_result_q0;
wire   [16:0] m_operand1_address0;
wire    m_operand1_ce0;
wire    m_operand1_we0;
wire   [31:0] m_operand1_d0;
wire   [31:0] m_operand1_q0;
wire   [16:0] m_operand1_address1;
wire    m_operand1_ce1;
wire   [31:0] m_operand1_q1;
wire   [16:0] m_operand2_address0;
wire    m_operand2_ce0;
wire    m_operand2_we0;
wire   [31:0] m_operand2_d0;
wire   [31:0] m_operand2_q0;
wire   [16:0] m_operand2_address1;
wire    m_operand2_ce1;
wire   [31:0] m_operand2_q1;
wire   [0:0] grp_matrix_mul_thread_fu_74_ReadEnablePort_0;
wire    grp_matrix_mul_thread_fu_74_ReadEnablePort_0_ap_vld;
wire   [0:0] grp_matrix_mul_thread_fu_74_ReadEmptyPort_0;
wire   [31:0] grp_matrix_mul_thread_fu_74_ReadDataPort_0;
wire   [0:0] grp_matrix_mul_thread_fu_74_WriteEnablePort_0;
wire    grp_matrix_mul_thread_fu_74_WriteEnablePort_0_ap_vld;
wire   [0:0] grp_matrix_mul_thread_fu_74_WriteFullPort_0;
wire   [31:0] grp_matrix_mul_thread_fu_74_WriteDataPort_0;
wire    grp_matrix_mul_thread_fu_74_WriteDataPort_0_ap_vld;
wire   [16:0] grp_matrix_mul_thread_fu_74_m_result_address0;
wire    grp_matrix_mul_thread_fu_74_m_result_ce0;
wire    grp_matrix_mul_thread_fu_74_m_result_we0;
wire   [31:0] grp_matrix_mul_thread_fu_74_m_result_d0;
wire   [31:0] grp_matrix_mul_thread_fu_74_m_result_q0;
wire   [16:0] grp_matrix_mul_thread_fu_74_m_operand1_address0;
wire    grp_matrix_mul_thread_fu_74_m_operand1_ce0;
wire    grp_matrix_mul_thread_fu_74_m_operand1_we0;
wire   [31:0] grp_matrix_mul_thread_fu_74_m_operand1_d0;
wire   [31:0] grp_matrix_mul_thread_fu_74_m_operand1_q0;
wire   [16:0] grp_matrix_mul_thread_fu_74_m_operand1_address1;
wire    grp_matrix_mul_thread_fu_74_m_operand1_ce1;
wire   [31:0] grp_matrix_mul_thread_fu_74_m_operand1_q1;
wire   [16:0] grp_matrix_mul_thread_fu_74_m_operand2_address0;
wire    grp_matrix_mul_thread_fu_74_m_operand2_ce0;
wire    grp_matrix_mul_thread_fu_74_m_operand2_we0;
wire   [31:0] grp_matrix_mul_thread_fu_74_m_operand2_d0;
wire   [31:0] grp_matrix_mul_thread_fu_74_m_operand2_q0;
wire   [16:0] grp_matrix_mul_thread_fu_74_m_operand2_address1;
wire    grp_matrix_mul_thread_fu_74_m_operand2_ce1;
wire   [31:0] grp_matrix_mul_thread_fu_74_m_operand2_q1;
parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_true = 1'b1;


matrix_mul_m_result #(
    .DataWidth( 32 ),
    .AddressRange( 90000 ),
    .AddressWidth( 17 ))
m_result_U(
    .clk( ClockPort ),
    .reset( nResetPort ),
    .address0( m_result_address0 ),
    .ce0( m_result_ce0 ),
    .we0( m_result_we0 ),
    .d0( m_result_d0 ),
    .q0( m_result_q0 )
);

matrix_mul_m_operand1 #(
    .DataWidth( 32 ),
    .AddressRange( 90000 ),
    .AddressWidth( 17 ))
m_operand1_U(
    .clk( ClockPort ),
    .reset( nResetPort ),
    .address0( m_operand1_address0 ),
    .ce0( m_operand1_ce0 ),
    .we0( m_operand1_we0 ),
    .d0( m_operand1_d0 ),
    .q0( m_operand1_q0 ),
    .address1( m_operand1_address1 ),
    .ce1( m_operand1_ce1 ),
    .q1( m_operand1_q1 )
);

matrix_mul_m_operand1 #(
    .DataWidth( 32 ),
    .AddressRange( 90000 ),
    .AddressWidth( 17 ))
m_operand2_U(
    .clk( ClockPort ),
    .reset( nResetPort ),
    .address0( m_operand2_address0 ),
    .ce0( m_operand2_ce0 ),
    .we0( m_operand2_we0 ),
    .d0( m_operand2_d0 ),
    .q0( m_operand2_q0 ),
    .address1( m_operand2_address1 ),
    .ce1( m_operand2_ce1 ),
    .q1( m_operand2_q1 )
);

matrix_mul_thread grp_matrix_mul_thread_fu_74(
    .ap_clk( ClockPort ),
    .ap_rst( nResetPort ),
    .ReadEnablePort_0( grp_matrix_mul_thread_fu_74_ReadEnablePort_0 ),
    .ReadEnablePort_0_ap_vld( grp_matrix_mul_thread_fu_74_ReadEnablePort_0_ap_vld ),
    .ReadEmptyPort_0( grp_matrix_mul_thread_fu_74_ReadEmptyPort_0 ),
    .ReadDataPort_0( grp_matrix_mul_thread_fu_74_ReadDataPort_0 ),
    .WriteEnablePort_0( grp_matrix_mul_thread_fu_74_WriteEnablePort_0 ),
    .WriteEnablePort_0_ap_vld( grp_matrix_mul_thread_fu_74_WriteEnablePort_0_ap_vld ),
    .WriteFullPort_0( grp_matrix_mul_thread_fu_74_WriteFullPort_0 ),
    .WriteDataPort_0( grp_matrix_mul_thread_fu_74_WriteDataPort_0 ),
    .WriteDataPort_0_ap_vld( grp_matrix_mul_thread_fu_74_WriteDataPort_0_ap_vld ),
    .m_result_address0( grp_matrix_mul_thread_fu_74_m_result_address0 ),
    .m_result_ce0( grp_matrix_mul_thread_fu_74_m_result_ce0 ),
    .m_result_we0( grp_matrix_mul_thread_fu_74_m_result_we0 ),
    .m_result_d0( grp_matrix_mul_thread_fu_74_m_result_d0 ),
    .m_result_q0( grp_matrix_mul_thread_fu_74_m_result_q0 ),
    .m_operand1_address0( grp_matrix_mul_thread_fu_74_m_operand1_address0 ),
    .m_operand1_ce0( grp_matrix_mul_thread_fu_74_m_operand1_ce0 ),
    .m_operand1_we0( grp_matrix_mul_thread_fu_74_m_operand1_we0 ),
    .m_operand1_d0( grp_matrix_mul_thread_fu_74_m_operand1_d0 ),
    .m_operand1_q0( grp_matrix_mul_thread_fu_74_m_operand1_q0 ),
    .m_operand1_address1( grp_matrix_mul_thread_fu_74_m_operand1_address1 ),
    .m_operand1_ce1( grp_matrix_mul_thread_fu_74_m_operand1_ce1 ),
    .m_operand1_q1( grp_matrix_mul_thread_fu_74_m_operand1_q1 ),
    .m_operand2_address0( grp_matrix_mul_thread_fu_74_m_operand2_address0 ),
    .m_operand2_ce0( grp_matrix_mul_thread_fu_74_m_operand2_ce0 ),
    .m_operand2_we0( grp_matrix_mul_thread_fu_74_m_operand2_we0 ),
    .m_operand2_d0( grp_matrix_mul_thread_fu_74_m_operand2_d0 ),
    .m_operand2_q0( grp_matrix_mul_thread_fu_74_m_operand2_q0 ),
    .m_operand2_address1( grp_matrix_mul_thread_fu_74_m_operand2_address1 ),
    .m_operand2_ce1( grp_matrix_mul_thread_fu_74_m_operand2_ce1 ),
    .m_operand2_q1( grp_matrix_mul_thread_fu_74_m_operand2_q1 )
);



/// ReadEnablePort_0 assign process. ///
always @ (posedge ClockPort)
begin : ap_ret_ReadEnablePort_0
    if (nResetPort == 1'b1) begin
        ReadEnablePort_0 <= ap_const_lv1_0;
    end else begin
        if ((ap_const_logic_1 == grp_matrix_mul_thread_fu_74_ReadEnablePort_0_ap_vld)) begin
            ReadEnablePort_0 <= grp_matrix_mul_thread_fu_74_ReadEnablePort_0;
        end
    end
end

/// WriteDataPort_0 assign process. ///
always @ (posedge ClockPort)
begin : ap_ret_WriteDataPort_0
    if (nResetPort == 1'b1) begin
        WriteDataPort_0 <= ap_const_lv32_0;
    end else begin
        if ((ap_const_logic_1 == grp_matrix_mul_thread_fu_74_WriteDataPort_0_ap_vld)) begin
            WriteDataPort_0 <= grp_matrix_mul_thread_fu_74_WriteDataPort_0;
        end
    end
end

/// WriteEnablePort_0 assign process. ///
always @ (posedge ClockPort)
begin : ap_ret_WriteEnablePort_0
    if (nResetPort == 1'b1) begin
        WriteEnablePort_0 <= ap_const_lv1_0;
    end else begin
        if ((ap_const_logic_1 == grp_matrix_mul_thread_fu_74_WriteEnablePort_0_ap_vld)) begin
            WriteEnablePort_0 <= grp_matrix_mul_thread_fu_74_WriteEnablePort_0;
        end
    end
end
assign grp_matrix_mul_thread_fu_74_ReadDataPort_0 = ReadDataPort_0;
assign grp_matrix_mul_thread_fu_74_ReadEmptyPort_0 = ReadEmptyPort_0;
assign grp_matrix_mul_thread_fu_74_WriteFullPort_0 = WriteFullPort_0;
assign grp_matrix_mul_thread_fu_74_m_operand1_q0 = m_operand1_q0;
assign grp_matrix_mul_thread_fu_74_m_operand1_q1 = m_operand1_q1;
assign grp_matrix_mul_thread_fu_74_m_operand2_q0 = m_operand2_q0;
assign grp_matrix_mul_thread_fu_74_m_operand2_q1 = m_operand2_q1;
assign grp_matrix_mul_thread_fu_74_m_result_q0 = m_result_q0;
assign m_operand1_address0 = grp_matrix_mul_thread_fu_74_m_operand1_address0;
assign m_operand1_address1 = grp_matrix_mul_thread_fu_74_m_operand1_address1;
assign m_operand1_ce0 = grp_matrix_mul_thread_fu_74_m_operand1_ce0;
assign m_operand1_ce1 = grp_matrix_mul_thread_fu_74_m_operand1_ce1;
assign m_operand1_d0 = grp_matrix_mul_thread_fu_74_m_operand1_d0;
assign m_operand1_we0 = grp_matrix_mul_thread_fu_74_m_operand1_we0;
assign m_operand2_address0 = grp_matrix_mul_thread_fu_74_m_operand2_address0;
assign m_operand2_address1 = grp_matrix_mul_thread_fu_74_m_operand2_address1;
assign m_operand2_ce0 = grp_matrix_mul_thread_fu_74_m_operand2_ce0;
assign m_operand2_ce1 = grp_matrix_mul_thread_fu_74_m_operand2_ce1;
assign m_operand2_d0 = grp_matrix_mul_thread_fu_74_m_operand2_d0;
assign m_operand2_we0 = grp_matrix_mul_thread_fu_74_m_operand2_we0;
assign m_result_address0 = grp_matrix_mul_thread_fu_74_m_result_address0;
assign m_result_ce0 = grp_matrix_mul_thread_fu_74_m_result_ce0;
assign m_result_d0 = grp_matrix_mul_thread_fu_74_m_result_d0;
assign m_result_we0 = grp_matrix_mul_thread_fu_74_m_result_we0;


endmodule //matrix_mul

