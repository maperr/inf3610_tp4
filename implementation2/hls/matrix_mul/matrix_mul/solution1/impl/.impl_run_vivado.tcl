## ==============================================================
## File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
## Version: 2012.4
## Copyright (C) 2012 Xilinx Inc. All rights reserved.
## 
## ==============================================================

#
# define some helpful variables, dirs, etc.
#
source ./settings.tcl
source ./extraction.tcl

set targetPart ${device}${package}${speed}
set outputBaseName $top_module
set outputDir ./report 
file mkdir $outputDir

# zynq support in Vivado
if { [string equal -nocase $family "zynq"] } {
    device_enable -enable $targetPart
}

# create project to specify part info (for IPs)
create_project project . -part $targetPart -force

#
# setup design sources and constraints
#
set hdlfiles [glob -nocomplain *.v *.vhd] 
if { $hdlfiles != ""} {
    foreach file $hdlfiles {
        set hdlext [file extension $file]
        if { [string equal -nocase $hdlext ".v"] } {
            read_verilog $file
        }
        if { [string equal -nocase $hdlext ".vhd"] } {
            read_vhdl $file
        }
    }
}

read_xdc [glob -nocomplain *.xdc]

# vivado scripts to generate IP
set tclfiles [glob -nocomplain *_ip.tcl]
if { $tclfiles != ""} {
    foreach file $tclfiles {
         source $file
    }
}
#
# run basic compilation - synthesis, place & route
#
if { $add_io_buffers == "false" && $comb_luts == "false"} {
    synth_design -top $top_module -no_iobuf -mode out_of_context -no_lc -fsm_extraction $fsm_ext
} elseif { $add_io_buffers == "false" } {
    synth_design -top $top_module -no_iobuf -mode out_of_context -fsm_extraction $fsm_ext
} elseif { $comb_luts == "false"} {
    synth_design -top $top_module -no_lc -fsm_extraction $fsm_ext
} else {
    synth_design -top $top_module -fsm_extraction $fsm_ext
}
#
# write a few files and reports after synthesis
#
write_checkpoint -force $outputDir/${outputBaseName}_synth.dcp
report_utilization -file $outputDir/${outputBaseName}_utilization_synth.rpt
report_timing -sort_by group -max_paths 5 -path_type summary -file $outputDir/${outputBaseName}_timing_synth.rpt

opt_design
place_design
phys_opt_design
route_design
report_timing

#
# write a few files and reports after route
#
report_timing -file $outputDir/${outputBaseName}_timing_routed.rpt
write_verilog -force $outputDir/${outputBaseName}_routed.v
write_xdc -force $outputDir/${outputBaseName}_routed.xdc
write_checkpoint -force $outputDir/${outputBaseName}_routed.dcp
write_pcf -force $outputDir/${outputBaseName}_routed.pcf
report_utilization -file $outputDir/${outputBaseName}_utilization_routed.rpt

if { [catch { compile_reports_rodin $top_module $language $targetPart} err] } {
    puts "@E \[IMPL-251\] Errors occured while compiling report: $err"
    exit 1
}
