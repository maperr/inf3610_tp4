-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2012.4
-- Copyright (C) 2012 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity matrix_mul is
port (
    nResetPort : IN STD_LOGIC;
    ClockPort : IN STD_LOGIC;
    ReadEnablePort_0 : OUT STD_LOGIC_VECTOR (0 downto 0) := "0";
    ReadEmptyPort_0 : IN STD_LOGIC_VECTOR (0 downto 0);
    ReadDataPort_0 : IN STD_LOGIC_VECTOR (31 downto 0);
    WriteEnablePort_0 : OUT STD_LOGIC_VECTOR (0 downto 0) := "0";
    WriteFullPort_0 : IN STD_LOGIC_VECTOR (0 downto 0);
    WriteDataPort_0 : OUT STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000" );
end;


architecture behav of matrix_mul is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "matrix_mul,hls_ip_2012_4,{HLS_INPUT_TYPE=sc,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.360000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=576,HLS_SYN_DSP=48,HLS_SYN_FF=10411,HLS_SYN_LUT=17430}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_logic_0 : STD_LOGIC := '0';

    signal m_result_address0 : STD_LOGIC_VECTOR (16 downto 0);
    signal m_result_ce0 : STD_LOGIC;
    signal m_result_we0 : STD_LOGIC;
    signal m_result_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_result_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_operand1_address0 : STD_LOGIC_VECTOR (16 downto 0);
    signal m_operand1_ce0 : STD_LOGIC;
    signal m_operand1_we0 : STD_LOGIC;
    signal m_operand1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_operand1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_operand1_address1 : STD_LOGIC_VECTOR (16 downto 0);
    signal m_operand1_ce1 : STD_LOGIC;
    signal m_operand1_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_operand2_address0 : STD_LOGIC_VECTOR (16 downto 0);
    signal m_operand2_ce0 : STD_LOGIC;
    signal m_operand2_we0 : STD_LOGIC;
    signal m_operand2_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_operand2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_operand2_address1 : STD_LOGIC_VECTOR (16 downto 0);
    signal m_operand2_ce1 : STD_LOGIC;
    signal m_operand2_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_matrix_mul_thread_fu_74_ReadEnablePort_0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_matrix_mul_thread_fu_74_ReadEnablePort_0_ap_vld : STD_LOGIC;
    signal grp_matrix_mul_thread_fu_74_ReadEmptyPort_0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_matrix_mul_thread_fu_74_ReadDataPort_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_matrix_mul_thread_fu_74_WriteEnablePort_0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_matrix_mul_thread_fu_74_WriteEnablePort_0_ap_vld : STD_LOGIC;
    signal grp_matrix_mul_thread_fu_74_WriteFullPort_0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_matrix_mul_thread_fu_74_WriteDataPort_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_matrix_mul_thread_fu_74_WriteDataPort_0_ap_vld : STD_LOGIC;
    signal grp_matrix_mul_thread_fu_74_m_result_address0 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_matrix_mul_thread_fu_74_m_result_ce0 : STD_LOGIC;
    signal grp_matrix_mul_thread_fu_74_m_result_we0 : STD_LOGIC;
    signal grp_matrix_mul_thread_fu_74_m_result_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_matrix_mul_thread_fu_74_m_result_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_matrix_mul_thread_fu_74_m_operand1_address0 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_matrix_mul_thread_fu_74_m_operand1_ce0 : STD_LOGIC;
    signal grp_matrix_mul_thread_fu_74_m_operand1_we0 : STD_LOGIC;
    signal grp_matrix_mul_thread_fu_74_m_operand1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_matrix_mul_thread_fu_74_m_operand1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_matrix_mul_thread_fu_74_m_operand1_address1 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_matrix_mul_thread_fu_74_m_operand1_ce1 : STD_LOGIC;
    signal grp_matrix_mul_thread_fu_74_m_operand1_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_matrix_mul_thread_fu_74_m_operand2_address0 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_matrix_mul_thread_fu_74_m_operand2_ce0 : STD_LOGIC;
    signal grp_matrix_mul_thread_fu_74_m_operand2_we0 : STD_LOGIC;
    signal grp_matrix_mul_thread_fu_74_m_operand2_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_matrix_mul_thread_fu_74_m_operand2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_matrix_mul_thread_fu_74_m_operand2_address1 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_matrix_mul_thread_fu_74_m_operand2_ce1 : STD_LOGIC;
    signal grp_matrix_mul_thread_fu_74_m_operand2_q1 : STD_LOGIC_VECTOR (31 downto 0);

    component matrix_mul_thread IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ReadEnablePort_0 : OUT STD_LOGIC_VECTOR (0 downto 0);
        ReadEnablePort_0_ap_vld : OUT STD_LOGIC;
        ReadEmptyPort_0 : IN STD_LOGIC_VECTOR (0 downto 0);
        ReadDataPort_0 : IN STD_LOGIC_VECTOR (31 downto 0);
        WriteEnablePort_0 : OUT STD_LOGIC_VECTOR (0 downto 0);
        WriteEnablePort_0_ap_vld : OUT STD_LOGIC;
        WriteFullPort_0 : IN STD_LOGIC_VECTOR (0 downto 0);
        WriteDataPort_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        WriteDataPort_0_ap_vld : OUT STD_LOGIC;
        m_result_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
        m_result_ce0 : OUT STD_LOGIC;
        m_result_we0 : OUT STD_LOGIC;
        m_result_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_result_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        m_operand1_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
        m_operand1_ce0 : OUT STD_LOGIC;
        m_operand1_we0 : OUT STD_LOGIC;
        m_operand1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_operand1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        m_operand1_address1 : OUT STD_LOGIC_VECTOR (16 downto 0);
        m_operand1_ce1 : OUT STD_LOGIC;
        m_operand1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        m_operand2_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
        m_operand2_ce0 : OUT STD_LOGIC;
        m_operand2_we0 : OUT STD_LOGIC;
        m_operand2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_operand2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        m_operand2_address1 : OUT STD_LOGIC_VECTOR (16 downto 0);
        m_operand2_ce1 : OUT STD_LOGIC;
        m_operand2_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component matrix_mul_m_result IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (16 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component matrix_mul_m_operand1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (16 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (16 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    m_result_U : component matrix_mul_m_result
    generic map (
        DataWidth => 32,
        AddressRange => 90000,
        AddressWidth => 17)
    port map (
        clk => ClockPort,
        reset => nResetPort,
        address0 => m_result_address0,
        ce0 => m_result_ce0,
        we0 => m_result_we0,
        d0 => m_result_d0,
        q0 => m_result_q0);

    m_operand1_U : component matrix_mul_m_operand1
    generic map (
        DataWidth => 32,
        AddressRange => 90000,
        AddressWidth => 17)
    port map (
        clk => ClockPort,
        reset => nResetPort,
        address0 => m_operand1_address0,
        ce0 => m_operand1_ce0,
        we0 => m_operand1_we0,
        d0 => m_operand1_d0,
        q0 => m_operand1_q0,
        address1 => m_operand1_address1,
        ce1 => m_operand1_ce1,
        q1 => m_operand1_q1);

    m_operand2_U : component matrix_mul_m_operand1
    generic map (
        DataWidth => 32,
        AddressRange => 90000,
        AddressWidth => 17)
    port map (
        clk => ClockPort,
        reset => nResetPort,
        address0 => m_operand2_address0,
        ce0 => m_operand2_ce0,
        we0 => m_operand2_we0,
        d0 => m_operand2_d0,
        q0 => m_operand2_q0,
        address1 => m_operand2_address1,
        ce1 => m_operand2_ce1,
        q1 => m_operand2_q1);

    grp_matrix_mul_thread_fu_74 : component matrix_mul_thread
    port map (
        ap_clk => ClockPort,
        ap_rst => nResetPort,
        ReadEnablePort_0 => grp_matrix_mul_thread_fu_74_ReadEnablePort_0,
        ReadEnablePort_0_ap_vld => grp_matrix_mul_thread_fu_74_ReadEnablePort_0_ap_vld,
        ReadEmptyPort_0 => grp_matrix_mul_thread_fu_74_ReadEmptyPort_0,
        ReadDataPort_0 => grp_matrix_mul_thread_fu_74_ReadDataPort_0,
        WriteEnablePort_0 => grp_matrix_mul_thread_fu_74_WriteEnablePort_0,
        WriteEnablePort_0_ap_vld => grp_matrix_mul_thread_fu_74_WriteEnablePort_0_ap_vld,
        WriteFullPort_0 => grp_matrix_mul_thread_fu_74_WriteFullPort_0,
        WriteDataPort_0 => grp_matrix_mul_thread_fu_74_WriteDataPort_0,
        WriteDataPort_0_ap_vld => grp_matrix_mul_thread_fu_74_WriteDataPort_0_ap_vld,
        m_result_address0 => grp_matrix_mul_thread_fu_74_m_result_address0,
        m_result_ce0 => grp_matrix_mul_thread_fu_74_m_result_ce0,
        m_result_we0 => grp_matrix_mul_thread_fu_74_m_result_we0,
        m_result_d0 => grp_matrix_mul_thread_fu_74_m_result_d0,
        m_result_q0 => grp_matrix_mul_thread_fu_74_m_result_q0,
        m_operand1_address0 => grp_matrix_mul_thread_fu_74_m_operand1_address0,
        m_operand1_ce0 => grp_matrix_mul_thread_fu_74_m_operand1_ce0,
        m_operand1_we0 => grp_matrix_mul_thread_fu_74_m_operand1_we0,
        m_operand1_d0 => grp_matrix_mul_thread_fu_74_m_operand1_d0,
        m_operand1_q0 => grp_matrix_mul_thread_fu_74_m_operand1_q0,
        m_operand1_address1 => grp_matrix_mul_thread_fu_74_m_operand1_address1,
        m_operand1_ce1 => grp_matrix_mul_thread_fu_74_m_operand1_ce1,
        m_operand1_q1 => grp_matrix_mul_thread_fu_74_m_operand1_q1,
        m_operand2_address0 => grp_matrix_mul_thread_fu_74_m_operand2_address0,
        m_operand2_ce0 => grp_matrix_mul_thread_fu_74_m_operand2_ce0,
        m_operand2_we0 => grp_matrix_mul_thread_fu_74_m_operand2_we0,
        m_operand2_d0 => grp_matrix_mul_thread_fu_74_m_operand2_d0,
        m_operand2_q0 => grp_matrix_mul_thread_fu_74_m_operand2_q0,
        m_operand2_address1 => grp_matrix_mul_thread_fu_74_m_operand2_address1,
        m_operand2_ce1 => grp_matrix_mul_thread_fu_74_m_operand2_ce1,
        m_operand2_q1 => grp_matrix_mul_thread_fu_74_m_operand2_q1);




    -- ReadEnablePort_0 assign process. --
    ReadEnablePort_0_assign_proc : process(ClockPort)
    begin
        if (ClockPort'event and ClockPort =  '1') then
            if (nResetPort = '1') then
                ReadEnablePort_0 <= ap_const_lv1_0;
            else
                if ((ap_const_logic_1 = grp_matrix_mul_thread_fu_74_ReadEnablePort_0_ap_vld)) then 
                    ReadEnablePort_0 <= grp_matrix_mul_thread_fu_74_ReadEnablePort_0;
                end if; 
            end if;
        end if;
    end process;


    -- WriteDataPort_0 assign process. --
    WriteDataPort_0_assign_proc : process(ClockPort)
    begin
        if (ClockPort'event and ClockPort =  '1') then
            if (nResetPort = '1') then
                WriteDataPort_0 <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = grp_matrix_mul_thread_fu_74_WriteDataPort_0_ap_vld)) then 
                    WriteDataPort_0 <= grp_matrix_mul_thread_fu_74_WriteDataPort_0;
                end if; 
            end if;
        end if;
    end process;


    -- WriteEnablePort_0 assign process. --
    WriteEnablePort_0_assign_proc : process(ClockPort)
    begin
        if (ClockPort'event and ClockPort =  '1') then
            if (nResetPort = '1') then
                WriteEnablePort_0 <= ap_const_lv1_0;
            else
                if ((ap_const_logic_1 = grp_matrix_mul_thread_fu_74_WriteEnablePort_0_ap_vld)) then 
                    WriteEnablePort_0 <= grp_matrix_mul_thread_fu_74_WriteEnablePort_0;
                end if; 
            end if;
        end if;
    end process;

    grp_matrix_mul_thread_fu_74_ReadDataPort_0 <= ReadDataPort_0;
    grp_matrix_mul_thread_fu_74_ReadEmptyPort_0 <= ReadEmptyPort_0;
    grp_matrix_mul_thread_fu_74_WriteFullPort_0 <= WriteFullPort_0;
    grp_matrix_mul_thread_fu_74_m_operand1_q0 <= m_operand1_q0;
    grp_matrix_mul_thread_fu_74_m_operand1_q1 <= m_operand1_q1;
    grp_matrix_mul_thread_fu_74_m_operand2_q0 <= m_operand2_q0;
    grp_matrix_mul_thread_fu_74_m_operand2_q1 <= m_operand2_q1;
    grp_matrix_mul_thread_fu_74_m_result_q0 <= m_result_q0;
    m_operand1_address0 <= grp_matrix_mul_thread_fu_74_m_operand1_address0;
    m_operand1_address1 <= grp_matrix_mul_thread_fu_74_m_operand1_address1;
    m_operand1_ce0 <= grp_matrix_mul_thread_fu_74_m_operand1_ce0;
    m_operand1_ce1 <= grp_matrix_mul_thread_fu_74_m_operand1_ce1;
    m_operand1_d0 <= grp_matrix_mul_thread_fu_74_m_operand1_d0;
    m_operand1_we0 <= grp_matrix_mul_thread_fu_74_m_operand1_we0;
    m_operand2_address0 <= grp_matrix_mul_thread_fu_74_m_operand2_address0;
    m_operand2_address1 <= grp_matrix_mul_thread_fu_74_m_operand2_address1;
    m_operand2_ce0 <= grp_matrix_mul_thread_fu_74_m_operand2_ce0;
    m_operand2_ce1 <= grp_matrix_mul_thread_fu_74_m_operand2_ce1;
    m_operand2_d0 <= grp_matrix_mul_thread_fu_74_m_operand2_d0;
    m_operand2_we0 <= grp_matrix_mul_thread_fu_74_m_operand2_we0;
    m_result_address0 <= grp_matrix_mul_thread_fu_74_m_result_address0;
    m_result_ce0 <= grp_matrix_mul_thread_fu_74_m_result_ce0;
    m_result_d0 <= grp_matrix_mul_thread_fu_74_m_result_d0;
    m_result_we0 <= grp_matrix_mul_thread_fu_74_m_result_we0;
end behav;
