# 1 "C:/Users/gabil/Documents/INF3610A15Lab4Pt1/SpaceProject/Lab/Calculator/Calculator/src/module/controller.cpp"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "c:\\spacecodesign\\spacestudio-2.7.0\\toolchains\\arm-unknown-linux-gnueabi\\arm-unknown-linux-gnueabi\\sysroot\\usr\\include\\stdc-predef.h" 1 3 4
/* Copyright (C) 1991-2014 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */




/* This header is separate from features.h so that the compiler can
   include it implicitly at the start of every compilation.  It must
   not itself include <features.h> or any other header that includes
   <features.h> because the implicit include comes before any feature
   test macros that may be defined in a source file before it first
   explicitly includes a system header.  GCC knows the name of this
   header in order to preinclude it.  */

/* glibc's intent is to support the IEC 559 math functionality, real
   and complex.  If the GCC (4.9 and later) predefined macros
   specifying compiler intent are available, use them to determine
   whether the overall intent is to support these features; otherwise,
   presume an older compiler has intent to support these features and
   define these macros by default.  */
# 52 "c:\\spacecodesign\\spacestudio-2.7.0\\toolchains\\arm-unknown-linux-gnueabi\\arm-unknown-linux-gnueabi\\sysroot\\usr\\include\\stdc-predef.h" 3 4
/* wchar_t uses ISO/IEC 10646 (2nd ed., published 2011-03-15) /
   Unicode 6.0.  */


/* We do not support C11 <threads.h>.  */
# 1 "<command-line>" 2
# 1 "C:/Users/gabil/Documents/INF3610A15Lab4Pt1/SpaceProject/Lab/Calculator/Calculator/src/module/controller.cpp"
// ***********************************************************************
//
// Filename : controller.cpp
//
// Author : SpaceStudio generation engine
//
// Creation date : Wed Oct 17 09:38:19 EDT 2012
//
//
// ***********************************************************************
#include "controller.h"
# 11 "C:/Users/gabil/Documents/INF3610A15Lab4Pt1/SpaceProject/Lab/Calculator/Calculator/src/module/controller.cpp"
# 1 "C:/Users/gabil/Documents/INF3610A15Lab4Pt1/SpaceProject/Lab/Calculator/Calculator/src/module/controller.h" 1
// ***********************************************************************
//
// Filename : controller.h
//
// Author : SpaceStudio generation engine
//
// Creation date : Wed Oct 17 09:38:19 EDT 2012
//
//
// ***********************************************************************



#include "systemc.h"
# 14 "C:/Users/gabil/Documents/INF3610A15Lab4Pt1/SpaceProject/Lab/Calculator/Calculator/src/module/controller.h"
# 1 "C:/SpaceCodesign/SpaceStudio-2.7.0/SpaceStudio/src/main/resources/a/ck/headers/sw/systemc.h" 1



#include "systemc"
# 4 "C:/SpaceCodesign/SpaceStudio-2.7.0/SpaceStudio/src/main/resources/a/ck/headers/sw/systemc.h"
# 1 "C:/SpaceCodesign/SpaceStudio-2.7.0/SpaceStudio/src/main/resources/a/ck/headers/sw/systemc" 1



// Nothing from SystemC proper
namespace sc_core {
}
# 5 "C:/SpaceCodesign/SpaceStudio-2.7.0/SpaceStudio/src/main/resources/a/ck/headers/sw/systemc.h" 2

// Using declarations in the C++ standard library, as specified in IEEE 1666-2011, section 5.1.2
namespace std {}
using std::ios;
using std::streambuf;
using std::streampos;
using std::streamsize;
using std::iostream;
using std::istream;
using std::ostream;
using std::cin;
using std::cout;
using std::cerr;
using std::endl;
using std::flush;
using std::dec;
using std::hex;
using std::oct;
using std::fstream;
using std::ifstream;
using std::ofstream;
using std::size_t;
using std::memchr;
using std::memcmp;
using std::memcpy;
using std::memmove;
using std::memset;
using std::strcat;
using std::strncat;
using std::strchr;
using std::strrchr;
using std::strcmp;
using std::strncmp;
using std::strcpy;
using std::strncpy;
using std::strcspn;
using std::strspn;
using std::strlen;
using std::strpbrk;
using std::strstr;
using std::strtok;
# 15 "C:/Users/gabil/Documents/INF3610A15Lab4Pt1/SpaceProject/Lab/Calculator/Calculator/src/module/controller.h" 2
#include "SpaceBaseModule.h"
# 15 "C:/Users/gabil/Documents/INF3610A15Lab4Pt1/SpaceProject/Lab/Calculator/Calculator/src/module/controller.h"
# 1 "C:/SpaceCodesign/SpaceStudio-2.7.0/SpaceStudio/src/main/resources/a/ck/headers/sw/SpaceBaseModule.h" 1



#include "SpaceTypes.h"
# 4 "C:/SpaceCodesign/SpaceStudio-2.7.0/SpaceStudio/src/main/resources/a/ck/headers/sw/SpaceBaseModule.h"
# 1 "C:/SpaceCodesign/SpaceStudio-2.7.0/SpaceLib/release/sw/include/SpaceTypes.h" 1
///////////////////////////////////////////////////////////////////////////////
///
///         Space Libraries - Space Codesign Systems Inc. (http://www.spacecodesign.com)
///         (c) All Rights Reserved. 2005-2014                            
///                                                                       
///         This file contains proprietary, confidential information of Space Codesign 
///         Systems Inc. and may be used only pursuant to the terms of a valid license 
///         agreement with Space Codesign Systems Inc. For more information about licensing,
///         please contact your Space Codesign representative. 
/// 
///////////////////////////////////////////////////////////////////////////////




///////////////////////////////////////////////////////////////////////////////
///\class     SPACE_STATUS
///
///\brief     Status returned by the Space Codesign engined for end users
///
///////////////////////////////////////////////////////////////////////////////
static const unsigned char SPACE_OK = 0; ///< Tells the operation was completed successfully
static const unsigned char SPACE_ERROR = 1; ///< Tells the operation did not complete and simulation 
static const unsigned char SPACE_EMPTY = 2; ///< may be corrupted or may fail
static const unsigned char SPACE_FULL = 3; ///> Tells the operation cannot be completed because no storage is available
static const unsigned char SPACE_NOT_CONNECTED = 99; ///< REports an access to an unconnected port

typedef unsigned char eSpaceStatus;


///////////////////////////////////////////////////////////////////////////////
///\enum     SpaceChannelStatusStr
///
///\brief    Statuses returned when using Space Interface Methods
///////////////////////////////////////////////////////////////////////////////
typedef enum
{
/**** for platform ****/
 SPACE_CHANNEL_OK = 0, // Was successfully completed from end to end
 SPACE_CHANNEL_FULL = 1, // Channel is FULL and write operation was cancelled
 SPACE_CHANNEL_EMPTY = 2, // Nothing to read and data pointer is invalid
 SPACE_CHANNEL_UNUSED_STATUS_1 = 3, // Currently unused status code

 SPACE_CHANNEL_UNUSED_STATUS_2 = 4, // Currently unused status code
    SPACE_CHANNEL_ADDR_OUT_OF_RANGE = 5, // Destination Address was out of range

 SPACE_CHANNEL_ERROR = 6, // An unrecoverable error from which the system cannot recover occured
          // Users receiving this error are recommended to stop the simulation
 SPACE_CHANNEL_TERMINATOR_ACCESS = 7, // An unbound port was accessed. 
          // Users receiving this error are recommended to stop the simulation

    SPACE_CHANNEL_MSG_SIZE_ERROR = 8, // Platform: Unsupported Size of Request
    SPACE_CHANNEL_NO_QUEUE_AVAILABLE = 9, // SW:No queue available in FreeQueuePool (in the case of writing)
 SPACE_CHANNEL_UNUSED_STATUS_4 = 10, // Currently unused status code

 /**** for RTL ****/
 SPACE_CHANNEL_IN_PROGRESS = 11, // Request currently being processed


/**** NEW ****/

 SPACE_UNKNOWN_DESTINATION = 12,
 SPACE_INVALID_OFFSET = 13


} eSpaceChannelStatus;


///////////////////////////////////////////////////////////////////////////////
///\enum     eSpaceTransactionType
///
///\brief    SPACE Transaction options. 
///\note     Updated with unsigned long type. 
///////////////////////////////////////////////////////////////////////////////
static const unsigned long SPACE_NON_BLOCKING = 0; ///< Indicates the transaction is non blocking
static const unsigned long SPACE_NO_WAIT = 0;
static const unsigned long SPACE_BLOCKING = 0xFFFFFFFF; ///< Indicates the transaction is blocking
static const unsigned long SPACE_WAIT_FOREVER = 0xFFFFFFFF;

typedef unsigned long eSpaceTransactionType;


///////////////////////////////////////////////////////////////////////////////
///\class     enum eSpaceComponentType
///
///\brief     Descriptor found in eSpaceComponentType representing either
///           a module or a device 
///////////////////////////////////////////////////////////////////////////////
typedef enum
{
    SPACE_UNREGISTERED = 0,
    SPACE_MODULE = 1,
    SPACE_DEVICE = 2,
    //SPACE_MODULE_ADAPTER = 3,
 SPACE_ISS_ADAPTER = 4,
 SPACE_REGISTER_FILE = 5,
 SPACE_SLAVE_BRIDGE = 6
} eSpaceComponentType;


///////////////////////////////////////////////////////////////////////////////
///\enum      eSpaceCommunicationType
///
///\brief      SPACE communication types
///////////////////////////////////////////////////////////////////////////////
typedef enum
{
 SPACE_MODULE_READ = 0,
 SPACE_MODULE_WRITE = 1,
 SPACE_DEVICE_READ = 2,
 SPACE_DEVICE_WRITE = 3,
 SPACE_REGISTER_READ = 4,
 SPACE_REGISTER_WRITE = 5,
 SPACE_UNKNOWN_COMMUNICATION = 0xFF
} eSpaceCommunicationType;



/* (c) Space Codesign Systems Inc. 2005-2014 */
# 5 "C:/SpaceCodesign/SpaceStudio-2.7.0/SpaceStudio/src/main/resources/a/ck/headers/sw/SpaceBaseModule.h" 2

#include "systemc"

class SpaceBaseModule;
# 16 "C:/Users/gabil/Documents/INF3610A15Lab4Pt1/SpaceProject/Lab/Calculator/Calculator/src/module/controller.h" 2

typedef enum {
 ADD,
 SUBTRACTION,
 MULTIPLY,
 DIVIDE,
 MULTIPLY_MAT
} Operation;

class controller : public SpaceBaseModule
{
 public:

  SC_HAS_PROCESS(controller);

  ///
  /// Constructor
  ///
  controller(sc_module_name zName, double dClockPeriod, sc_time_unit Unit, unsigned char ucID, unsigned char ucPriority, bool bVerbose);

  ///
  /// Members
  ///
  void thread(void);

 private:

  ///
  /// Members
  ///

  void sendResult(long data);
  void sendCharacter(unsigned char character);
  unsigned long readInput();
  void readData(long* operand1, long* operand2, Operation* operation);
  long getFirstOperand(unsigned char* ptr);
  long getSecondOperand(unsigned char* ptr);
  long convertCharacterToNumber(unsigned char* ptr, unsigned char length);
  bool isNegative(unsigned char character);
  bool isDigit(unsigned char character);
  bool isSpace(char character);
  bool isOperationCharacter(unsigned char character);
  unsigned long pow(int base, int exponent);
  int getOperationPosition(unsigned char* ptr);
  void readInputStream(unsigned char* ptr);
  void sanitize(unsigned char* ptr, int* position);
  bool isValidCommand(unsigned char* ptr);
  bool isDividedByZeroDetected(unsigned char* ptr);
  bool isOperationDetected(unsigned char* ptr);
  bool isOperand1Detected(unsigned char* ptr);
  bool isOperand2Detected(unsigned char* ptr);
  bool isNumber(unsigned char* ptr, unsigned char length);
  bool isLFDetected(unsigned char* ptr);
  int getLFPosition(unsigned char* ptr);
  bool isLF(unsigned char character);
  unsigned char* trimSpaces(unsigned char* ptr, unsigned char* length);
  Operation getOperation(unsigned char* ptr);
  long delegateOperation(Operation operation, long operand1, long operand2);
  void sendAdditionOperand(long data);
  void sendSubtractionOperand(long data);
  void sendMultiplicationOperand(long data);
  void sendDivisionOperand(long data);
  void sendMultiplicationMatOperand(unsigned long data);
  long readAdditionResult();
  long readSubtractionResult();
  long readMultiplicationResult();
  long readDivisionResult();
  void readMultiplicationMatResult(unsigned long resultBuffer[]);
  void init(unsigned char* ptr);
  int atoi(unsigned char c);
  unsigned char itoa(unsigned int x);
  int getOrder(unsigned long data);
  void displayMessage(char* message);

};
# 12 "C:/Users/gabil/Documents/INF3610A15Lab4Pt1/SpaceProject/Lab/Calculator/Calculator/src/module/controller.cpp" 2
#include "PlatformDefinitions.h"
# 12 "C:/Users/gabil/Documents/INF3610A15Lab4Pt1/SpaceProject/Lab/Calculator/Calculator/src/module/controller.cpp"
# 1 "temp/PlatformDefinitions.h" 1
// ***********************************************************************
//
// Filename: 		PlatformDefinitions.h
//
// Level:			Simtek
//
// Author: 			SpaceStudio generation engine
//
// Warning: 
// ========
//			1) This file content will be overwritten by the next generation process.
//			2) All the ID must be unique to the current project.
//
// ***********************************************************************




//Level of technology of this platform


// User's Module ID
# 32 "temp/PlatformDefinitions.h"
// User's Device(and Wrapper) ID



// User's Module priority
# 46 "temp/PlatformDefinitions.h"
// User's Device(and Wrapper) priority

// SpaceComponents IDs
# 62 "temp/PlatformDefinitions.h"
// SpaceComponents PRIOs
# 13 "C:/Users/gabil/Documents/INF3610A15Lab4Pt1/SpaceProject/Lab/Calculator/Calculator/src/module/controller.cpp" 2
#include "ApplicationDefinitions.h"
# 13 "C:/Users/gabil/Documents/INF3610A15Lab4Pt1/SpaceProject/Lab/Calculator/Calculator/src/module/controller.cpp"
# 1 "C:/Users/gabil/Documents/INF3610A15Lab4Pt1/SpaceProject/Lab/Calculator/Calculator/src/application/ApplicationDefinitions.h" 1

// ***********************************************************************
//
// Filename: 		ApplicationDefinitions.h
//
// Author: 			SpaceStudio generation engine
//
// Creation date: 	Wed Oct 17 09:37:35 EDT 2012
//
// Warning: 		This file will not be overwritten by the SpaceStudio 
//					generation engine.
//
// Note:			This file is automatically added in a new project or in an 
//					existing project only if this file is not already present.
//					Otherwise, this file remains untouched by the SpaceStudio 
//					generation engine.  So this is a good place to declare 
//					variables that are specific to your application and that 
//					you need to share between your configurations.
//
// ***********************************************************************




//Add your definitions here
# 14 "C:/Users/gabil/Documents/INF3610A15Lab4Pt1/SpaceProject/Lab/Calculator/Calculator/src/module/controller.cpp" 2
#include "SpaceDisplay.h"
# 14 "C:/Users/gabil/Documents/INF3610A15Lab4Pt1/SpaceProject/Lab/Calculator/Calculator/src/module/controller.cpp"
# 1 "C:/SpaceCodesign/SpaceStudio-2.7.0/SpaceStudio/src/main/resources/a/ck/headers/sw/SpaceDisplay.h" 1



// Nothing
# 15 "C:/Users/gabil/Documents/INF3610A15Lab4Pt1/SpaceProject/Lab/Calculator/Calculator/src/module/controller.cpp" 2
#include "matrix_def.h"
# 15 "C:/Users/gabil/Documents/INF3610A15Lab4Pt1/SpaceProject/Lab/Calculator/Calculator/src/module/controller.cpp"
# 1 "C:/Users/gabil/Documents/INF3610A15Lab4Pt1/SpaceProject/Lab/Calculator/Calculator/import/src/matrix_def.h" 1
# 16 "C:/Users/gabil/Documents/INF3610A15Lab4Pt1/SpaceProject/Lab/Calculator/Calculator/src/module/controller.cpp" 2
#include "matrix.h"
# 16 "C:/Users/gabil/Documents/INF3610A15Lab4Pt1/SpaceProject/Lab/Calculator/Calculator/src/module/controller.cpp"
# 1 "C:/Users/gabil/Documents/INF3610A15Lab4Pt1/SpaceProject/Lab/Calculator/Calculator/import/src/matrix.h" 1



#include "matrix_def.h"
# 4 "C:/Users/gabil/Documents/INF3610A15Lab4Pt1/SpaceProject/Lab/Calculator/Calculator/import/src/matrix.h"
# 1 "C:/Users/gabil/Documents/INF3610A15Lab4Pt1/SpaceProject/Lab/Calculator/Calculator/import/src/matrix_def.h" 1
# 5 "C:/Users/gabil/Documents/INF3610A15Lab4Pt1/SpaceProject/Lab/Calculator/Calculator/import/src/matrix.h" 2
extern unsigned int* matrix_data[];
# 17 "C:/Users/gabil/Documents/INF3610A15Lab4Pt1/SpaceProject/Lab/Calculator/Calculator/src/module/controller.cpp" 2



//////////////////////////////////////////////////////////////////////////////
///
///	Constructor
///
//////////////////////////////////////////////////////////////////////////////
controller::controller(sc_module_name zName, double dClockPeriod, sc_time_unit ClockPeriodUnit, unsigned char ucID, unsigned char ucPriority, bool bVerbose)
: SpaceBaseModule(zName, dClockPeriod, ClockPeriodUnit, ucID, ucPriority, bVerbose)
{
 SC_THREAD(thread);
}

//////////////////////////////////////////////////////////////////////////////
///
///	Controller's algorithm
///
//////////////////////////////////////////////////////////////////////////////
void controller::thread(void)
{
 long operand1;
 long operand2;
 long result;
 Operation operation;

 while(1) {
  readData(&operand1, &operand2, &operation);
  result = delegateOperation(operation, operand1, operand2);
  sendResult(result);
 }
}

//////////////////////////////////////////////////////////////////////////////
///
///	Send result to output
///
//////////////////////////////////////////////////////////////////////////////
void controller::sendResult(long data)
{
 if (GetVerbose())
  SpacePrint("Result:%d\n", data);

 int i;
 unsigned long power;
 unsigned int digit;

 // Negative number
 if (data < 0)
 {
  sendCharacter('-');
  data *= -1;
 }

 for(i=getOrder(data);i>=0;i--)
 {
  power = pow(10, i);
  digit = data/power;
  data -= digit*power;
  sendCharacter(itoa(digit));
 }

 sendCharacter(0xD);
}

//////////////////////////////////////////////////////////////////////////////
///
///	Send a character
///
//////////////////////////////////////////////////////////////////////////////
void controller::sendCharacter(unsigned char character)
{
 unsigned long data = (unsigned long)character;
 ModuleWrite(5, SPACE_BLOCKING, &data);
}

//////////////////////////////////////////////////////////////////////////////
///
///	Read data from input
///
//////////////////////////////////////////////////////////////////////////////
unsigned long controller::readInput()
{
 unsigned long data;

 ModuleRead(3, SPACE_BLOCKING, &data);

 return data;
}

//////////////////////////////////////////////////////////////////////////////
///
///	Read data
///
//////////////////////////////////////////////////////////////////////////////
void controller::readData(long* operand1, long* operand2, Operation* operation)
{
 unsigned char raw[20];

 readInputStream(raw);
 *operand1 = getFirstOperand(raw);
 *operand2 = getSecondOperand(raw);
 *operation = getOperation(raw);
}

//////////////////////////////////////////////////////////////////////////////
///
///	Get the first operand
///
//////////////////////////////////////////////////////////////////////////////
long controller::getFirstOperand(unsigned char* ptr)
{
 unsigned char length = getOperationPosition(ptr);
 unsigned char* trimPtr = trimSpaces(ptr, &length);
 long number = convertCharacterToNumber(trimPtr, length);

 if (GetVerbose())
  SpacePrint("First operand:%d\n", number);

 return number;
}

//////////////////////////////////////////////////////////////////////////////
///
///	Get the second operand
///
//////////////////////////////////////////////////////////////////////////////
long controller::getSecondOperand(unsigned char* ptr)
{
 unsigned char length = getLFPosition(ptr) - getOperationPosition(ptr) - 1;
 unsigned char* trimPtr = trimSpaces(ptr + getOperationPosition(ptr) + 1, &length);
 long number = convertCharacterToNumber(trimPtr, length);

 if (GetVerbose())
  SpacePrint("Second operand:%d\n", number);

 return number;
}

//////////////////////////////////////////////////////////////////////////////
///
///	Convert an array of character into a number
///
//////////////////////////////////////////////////////////////////////////////
long controller::convertCharacterToNumber(unsigned char* ptr, unsigned char length)
{
 unsigned char i;
 unsigned long number = 0;
 bool isNegativeNumber = false;

  for(i=0;i<length;i++)
  {
   if (isNegative(ptr[i]))
   {
    isNegativeNumber = true;
    continue;
   }

  number += atoi(ptr[i]) * pow(10, length-i-1);
  }

  return isNegativeNumber ? number * -1 : number;
}

//////////////////////////////////////////////////////////////////////////////
///
///	Determine if the character is a minus sign
///
//////////////////////////////////////////////////////////////////////////////
bool controller::isNegative(unsigned char character)
{
 if (character == '-')
  return true;
 return false;
}

//////////////////////////////////////////////////////////////////////////////
///
///	Determine if the character is a digit
///
//////////////////////////////////////////////////////////////////////////////
bool controller::isDigit(unsigned char character)
{
 if (('0' <= character) && (character <= '9'))
  return true;
 return false;
}

//////////////////////////////////////////////////////////////////////////////
///
///	Is the character a space
///
//////////////////////////////////////////////////////////////////////////////
bool controller::isSpace(char character)
{
 if (character == ' ')
  return true;
 return false;
}

//////////////////////////////////////////////////////////////////////////////
///
///	Get the operation position in the array
///
//////////////////////////////////////////////////////////////////////////////
bool controller::isOperationCharacter(unsigned char character)
{
 if ((character == '+') || (character == '-') || (character == '/') || (character == 'x') || (character == 'X') || (character == '*') || (character == 'z'))
  return true;
 return false;
}

//////////////////////////////////////////////////////////////////////////////
///
///	Raise to power
///
//////////////////////////////////////////////////////////////////////////////
unsigned long controller::pow(int base, int exponent)
{
 unsigned long result = 1;
 int i;
 for(i=0;i<exponent;i++)
  result *= base;
 return result;
}

//////////////////////////////////////////////////////////////////////////////
///
///	Get the operation position in the array
///
//////////////////////////////////////////////////////////////////////////////
int controller::getOperationPosition(unsigned char* ptr)
{
 bool isFirstCharacter = true;
 int i=0;
 for(i=0;i<20;i++)
 {
  if (!isFirstCharacter && isOperationCharacter(ptr[i]))
   return i;

  if (isFirstCharacter && isDigit(ptr[i]))
   isFirstCharacter = false;
 }

 return -1;
}

//////////////////////////////////////////////////////////////////////////////
///
///	Read the input stream
///
//////////////////////////////////////////////////////////////////////////////
void controller::readInputStream(unsigned char* ptr)
{
 int position;
 sanitize(ptr, &position);
 bool isOverflow = false;

 // Validate input stream
    while(!isValidCommand(ptr) || isDividedByZeroDetected(ptr))
    {
     // Prevent to have a string with no operation or with invalid operands
     if (isLFDetected(ptr) && (!isOperationDetected(ptr) || !isOperand1Detected(ptr) || !isOperand2Detected(ptr)))
     {
      sanitize(ptr, &position);
      displayMessage("Invalid input string\n");
      isOverflow = false;
     }

     if (isDividedByZeroDetected(ptr)) {
      sanitize(ptr, &position);
      displayMessage("Division by zero detected\n");
      isOverflow = false;
     }

  ptr[position++] = (unsigned char)readInput();

  // Loop in array
  if (position == 20)
  {
   sanitize(ptr, &position);
   if (!isOverflow)
    displayMessage("String too long, try again\n");
   isOverflow = true;
  }
    }
}

//////////////////////////////////////////////////////////////////////////////
///
///	Determine if the buffer contains a valid command
///
//////////////////////////////////////////////////////////////////////////////
bool controller::isValidCommand(unsigned char* ptr)
{
 return isLFDetected(ptr) && isOperationDetected(ptr) && isOperand1Detected(ptr) && isOperand2Detected(ptr);
}

//////////////////////////////////////////////////////////////////////////////
///
///	Determine if the buffer contains a division by zero
///
//////////////////////////////////////////////////////////////////////////////
bool controller::isDividedByZeroDetected(unsigned char* ptr)
{
 return isValidCommand(ptr) && getSecondOperand(ptr) == 0 && getOperation(ptr) == DIVIDE;
}

//////////////////////////////////////////////////////////////////////////////
///
///	Sanitize controller
///
//////////////////////////////////////////////////////////////////////////////
void controller::sanitize(unsigned char* ptr, int* position)
{
 *position = 0;
 init(ptr);
}

//////////////////////////////////////////////////////////////////////////////
///
///	Detect an operation
///
//////////////////////////////////////////////////////////////////////////////
bool controller::isOperationDetected(unsigned char* ptr)
{
 return getOperationPosition(ptr) != -1;
}

//////////////////////////////////////////////////////////////////////////////
///
///	Detect the first operand
///
//////////////////////////////////////////////////////////////////////////////
bool controller::isOperand1Detected(unsigned char* ptr)
{
 unsigned char length = getOperationPosition(ptr);
 unsigned char* trimPtr = trimSpaces(ptr, &length);
 return isNumber(trimPtr, length);
}

//////////////////////////////////////////////////////////////////////////////
///
///	Detect the second operand
///
//////////////////////////////////////////////////////////////////////////////
bool controller::isOperand2Detected(unsigned char* ptr)
{
 unsigned char length = getLFPosition(ptr) - getOperationPosition(ptr) - 1;
 unsigned char* trimPtr = trimSpaces(ptr + getOperationPosition(ptr) + 1, &length);
 return isNumber(trimPtr, length);
}

//////////////////////////////////////////////////////////////////////////////
///
///	Make sure it is a number
///
//////////////////////////////////////////////////////////////////////////////
bool controller::isNumber(unsigned char* ptr, unsigned char length)
{
 bool isFirstCharacter = true;
 int i;

 for(i=0;i<length;i++)
 {
  if (isSpace(ptr[i]))
   return false;

  if (isFirstCharacter && !isDigit(ptr[i]) && !isNegative(ptr[i]))
   return false;

  if (!isFirstCharacter && !isDigit(ptr[i]))
   return false;

  isFirstCharacter = false;
 }

 return true;
}

//////////////////////////////////////////////////////////////////////////////
///
///	Detect a line feed
///
//////////////////////////////////////////////////////////////////////////////
bool controller::isLFDetected(unsigned char* ptr)
{
 return getLFPosition(ptr) != -1;
}

//////////////////////////////////////////////////////////////////////////////
///
///	Detect a line feed
///
//////////////////////////////////////////////////////////////////////////////
int controller::getLFPosition(unsigned char* ptr)
{
 int i;
 for(i=0;i<20;i++)
  if (isLF(ptr[i]))
   return i;
 return -1;
}

//////////////////////////////////////////////////////////////////////////////
///
///	Determine if the character is a line feed
///
//////////////////////////////////////////////////////////////////////////////
bool controller::isLF(unsigned char character)
{
 return character == 0xD || character == 0xA;
}

//////////////////////////////////////////////////////////////////////////////
///
///	Trim trailing spaces
///
//////////////////////////////////////////////////////////////////////////////
unsigned char* controller::trimSpaces(unsigned char* ptr, unsigned char* length)
{
 int i;
 int count = 0;

 // Trim trailing spaces
 for(i=0;i<*length;i++)
  if (isSpace(ptr[i]))
   continue;
  else
   break;

 unsigned char* tmpPtr = ptr + i;
 *length -= i;

 // Trim leading spaces
 for(i=*length-1;i>=0;i--)
 {
  if (isSpace(tmpPtr[i]))
   count++;
  else
   break;
 }

 *length -= count;

 return tmpPtr;
}

//////////////////////////////////////////////////////////////////////////////
///
///	Get the operation
///
//////////////////////////////////////////////////////////////////////////////
Operation controller::getOperation(unsigned char* ptr)
{
 unsigned char operation = ptr[getOperationPosition(ptr)];

 if (operation == '+')
 {
  if (GetVerbose())
   SpacePrint("Addition detected!\n");

  return ADD;
 }

 if (operation == '-')
 {
  if (GetVerbose())
   SpacePrint("Subtraction detected!\n");

  return SUBTRACTION;
 }

 if ((operation == '*') || (operation == 'x') || (operation == 'X'))
 {
  if (GetVerbose())
   SpacePrint("Multiplication detected!\n");

  return MULTIPLY;
 }

 if (operation == '/')
 {
  if (GetVerbose())
   SpacePrint("Division detected!\n");

  return DIVIDE;
 }

 if (operation == 'z')
 {
  if (GetVerbose())
  {
   SpacePrint("Matrix multiplication detected!\n");

  }
  return MULTIPLY_MAT;
 }
}

//////////////////////////////////////////////////////////////////////////////
///
///	Delegate the operation
///
//////////////////////////////////////////////////////////////////////////////
long controller::delegateOperation(Operation operation, long operand1, long operand2)
{
 long result;
    switch (operation)
    {
        case ADD:
        {
         sendAdditionOperand(operand1);
         sendAdditionOperand(operand2);
         result = readAdditionResult();

    SpacePrint("%d + %d = %d\n", operand1, operand2, result);

         break;
        }
        case SUBTRACTION:
        {
         sendSubtractionOperand(operand1);
         sendSubtractionOperand(operand2);
         result = readSubtractionResult();

    SpacePrint("%d - %d = %d\n", operand1, operand2, result);

         break;
        }
        case MULTIPLY:
        {
         sendMultiplicationOperand(operand1);
         sendMultiplicationOperand(operand2);
         result = readMultiplicationResult();

    SpacePrint("%d * %d = %d\n", operand1, operand2, result);

         break;
        }
        case DIVIDE:
        {
         sendDivisionOperand(operand1);
         sendDivisionOperand(operand2);
         result = readDivisionResult();

    SpacePrint("%d / %d = %d\n", operand1, operand2, result);

         break;
        }
        case MULTIPLY_MAT:
        {
         sendMultiplicationMatOperand(operand1);
   sendMultiplicationMatOperand(operand2);
   unsigned long result [3 * 3];
   readMultiplicationMatResult(result);

    SpacePrint("%d z %d = \n", operand1, operand2);
    for(unsigned int i = 0; i < 3 * 3; i++)
    {
     SpacePrint("%lu\n", result[i]);
    }

   if(operand1 == 9 && operand2 == 9)
    sc_stop();
   break;
        }

    }

    return result;
}

//////////////////////////////////////////////////////////////////////////////
///
///	Send the addition's operand
///
//////////////////////////////////////////////////////////////////////////////
void controller::sendAdditionOperand(long data)
{
 ModuleWrite(0, SPACE_BLOCKING, &data);
}

//////////////////////////////////////////////////////////////////////////////
///
///	Send the substraction's operand
///
//////////////////////////////////////////////////////////////////////////////
void controller::sendSubtractionOperand(long data)
{
 ModuleWrite(6, SPACE_BLOCKING, &data);
}

//////////////////////////////////////////////////////////////////////////////
///
///	Send the multiplication's operand
///
//////////////////////////////////////////////////////////////////////////////
void controller::sendMultiplicationOperand(long data)
{
 ModuleWrite(4, SPACE_BLOCKING, &data);
}

//////////////////////////////////////////////////////////////////////////////
///
///	Send the division's operand
///
//////////////////////////////////////////////////////////////////////////////
void controller::sendDivisionOperand(long data)
{
 ModuleWrite(2, SPACE_BLOCKING, &data);
}

//////////////////////////////////////////////////////////////////////////////
///
///	Send the matrix multiplication operand
///
//////////////////////////////////////////////////////////////////////////////
void controller::sendMultiplicationMatOperand(unsigned long data)
{
 ModuleWrite(21, SPACE_BLOCKING, matrix_data[data], 3 * 3);
}

//////////////////////////////////////////////////////////////////////////////
///
///	Read the addition's result
///
//////////////////////////////////////////////////////////////////////////////
long controller::readAdditionResult()
{
 long data;

 ModuleRead(0, SPACE_BLOCKING, &data);

    return data;
}

//////////////////////////////////////////////////////////////////////////////
///
///	Read the substraction's result
///
//////////////////////////////////////////////////////////////////////////////
long controller::readSubtractionResult()
{
 long data;

 ModuleRead(6, SPACE_BLOCKING, &data);

    return data;
}

//////////////////////////////////////////////////////////////////////////////
///
///	Read the multiplication's result
///
//////////////////////////////////////////////////////////////////////////////
long controller::readMultiplicationResult()
{
 long data;

 ModuleRead(4, SPACE_BLOCKING, &data);

    return data;
}

//////////////////////////////////////////////////////////////////////////////
///
///	Read the division's result
///
//////////////////////////////////////////////////////////////////////////////
long controller::readDivisionResult()
{
 long data;

 ModuleRead(2, SPACE_BLOCKING, &data);

    return data;
}

//////////////////////////////////////////////////////////////////////////////
///
///	Read the matrix multiplication's result
///
//////////////////////////////////////////////////////////////////////////////
void controller::readMultiplicationMatResult(unsigned long resultBuffer[])
{
 ModuleRead(21, SPACE_BLOCKING, resultBuffer, 3 * 3);
}

//////////////////////////////////////////////////////////////////////////////
///
///	Initialize an array
///
//////////////////////////////////////////////////////////////////////////////
void controller::init(unsigned char* ptr)
{
 int i=0;
 for(i=0;i<20;i++)
  ptr[i] = 0;
}

//////////////////////////////////////////////////////////////////////////////
///
///	Convert a digit character into a digit
///
//////////////////////////////////////////////////////////////////////////////
int controller::atoi(unsigned char c)
{
 return c - 0x30;
}

//////////////////////////////////////////////////////////////////////////////
///
///	Convert a digit to a digit character
///
//////////////////////////////////////////////////////////////////////////////
unsigned char controller::itoa(unsigned int x)
{
 return x + 0x30;
}

//////////////////////////////////////////////////////////////////////////////
///
///	Get the order of magnitude of a integer
///
//////////////////////////////////////////////////////////////////////////////
int controller::getOrder(unsigned long data)
{
 if (data == 0)
  return 0;

 int order = 0;

 while (data >= pow(10, order))
 {
  order++;
 }

 return --order;
}

//////////////////////////////////////////////////////////////////////////////
///
///	Display message
///
//////////////////////////////////////////////////////////////////////////////
void controller::displayMessage(char* message)
{
 int i=0;
 do
 {
  sendCharacter(message[i]);
 } while(!isLF(message[i++]));

 sendCharacter(0xD);
}
